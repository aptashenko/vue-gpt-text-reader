// –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è user_id –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
import { LogSnag } from 'logsnag'

// –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
process.env.VITE_LOGSNAG_TOKEN = 'test-token'
process.env.VITE_LOGSNAG_PROJECT = 'test-project'

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä LogSnag
const logsnag = new LogSnag({
  token: process.env.VITE_LOGSNAG_TOKEN,
  project: process.env.VITE_LOGSNAG_PROJECT
})

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é user_id
async function testUserIdConversion() {
  console.log('üß™ Testing user_id conversion fix...')
  
  const testUserId = 12345 // Number from Supabase
  const testUserIdString = String(testUserId) // Converted to string
  
  console.log('üìä Original user ID:', testUserId, typeof testUserId)
  console.log('üìä Converted user ID:', testUserIdString, typeof testUserIdString)
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è LogSnag
  const eventData = {
    event: 'test_event',
    channel: 'user-engagement',
    icon: 'üß™',
    tags: {
      user_id: testUserIdString, // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π
      environment: 'test'
    },
    user_id: testUserIdString, // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π
    description: 'Test event for user_id validation'
  }
  
  console.log('üìã Event data structure:')
  console.log(JSON.stringify(eventData, null, 2))
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_id –≤–µ–∑–¥–µ —Å—Ç—Ä–æ–∫–∞
  const isValid = typeof eventData.user_id === 'string' && 
                  typeof eventData.tags.user_id === 'string'
  
  console.log('‚úÖ Validation result:', isValid ? 'PASSED' : 'FAILED')
  
  if (isValid) {
    console.log('üéâ user_id conversion fix is working correctly!')
  } else {
    console.log('‚ùå user_id conversion fix failed!')
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testUserIdConversion().catch(console.error) 